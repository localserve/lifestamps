{"version":3,"sources":["components/AddText.tsx","components/ListTimeStamps.tsx","lib/stamps.utils.ts","lib/localStorge.utils.ts","components/hooks/localStorage.hook.ts","components/InputFile.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["AddText","props","btnActions","inputActions","value","className","id","name","placeholder","onInput","onClick","onSubmit","ListTimeStamps","list","length","map","i","note","ts","formattedTimeStamp","Date","toJSON","split","day","time","replace","featureAvailable","localStorage","setItem","getItem","removeItem","e","exists","key","useLocalList","push","values","JSON","parse","stringify","append","fetch","get","clear","remove","addAtBeginning","unshift","InputFile","onFileRead","actions","htmlFor","type","accept","onChange","file","currentTarget","files","reader","FileReader","onload","data","target","result","console","log","readAsText","style","visibility","App","addStamp","fetchStamps","clearStamps","useState","newText","setNewText","stamps","setStamps","stamp","serial","dts","now","guid","created_at","updated_at","createStamp","href","encodeURIComponent","download","toLocaleDateString","mergedLifeStamps","stampsA","stampsB","obj","reduce","a","Object","merge","forEach","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5b80217b.chunk.js","sourcesContent":["import React from \"react\";\n\nexport default function AddText(props: any) {\n    const {btnActions, inputActions, value} = props;\n    return (\n        <div className='add-text-container'>\n            <textarea value={value} id=\"add-text\" name=\"add-text\" placeholder=\"enter text here\"\n                   onInput={inputActions.onInput}/>\n            <button id=\"add-text-btn\" onClick={btnActions.onSubmit}>+</button>\n        </div>\n    );\n}\n","import React from \"react\";\nimport {LifeStamp} from \"../lib/stamps.utils\";\n\nexport default function ListTimeStamps(props: any) {\n    const {list} = props;\n    return (\n        <div className=\"stamps\">\n            {list && list.length > 0 && list.map(({note, ts}: LifeStamp, i: number) => {\n                return (<div className=\"stamp\" key={`list-item-${i}`}>\n                    <div className=\"ts\">\n                        {ts}\n                    </div>\n                    <div className=\"note\">\n                        {note}\n                    </div>\n                </div>);\n            })}\n        </div>\n    );\n}","import {v4 as guid} from 'uuid';\n\nexport type LifeStamp = {\n    note: string,\n    ts: string,\n    id: string,\n    created_at: number;\n    updated_at: number;\n    serial: number;\n}\n\nfunction formattedTimeStamp() {\n    const d = new Date().toJSON();\n    const [day, timeString] = d.split('T');\n    const time = timeString.split('.')[0];\n    return `${day.replace(/-/g, '.')} ${time}`;\n}\n\nexport default function createStamp(note: string, serial: number): LifeStamp {\n    const dts: number = Date.now();\n    return {note, ts: formattedTimeStamp(), id: guid(), created_at: dts, updated_at: dts, serial};\n}\n\nfunction merge<T extends LifeStamp>(stampsA: T[], stampsB: T[]) {\n    let obj = stampsA.reduce((a: Object, stamp: T) => {\n        a = {...a, [`${stamp.id}`]: stamp};\n        return a;\n    }, {});\n    obj = stampsB.reduce((a: Object, stamp: T) => {\n        a = {...a, [`${stamp.id}`]: stamp};\n        return a;\n    }, obj);\n    const merged = Object.values(obj);\n    return merged;\n}\n\nexport {merge};\n","function featureAvailable() {\n    if (typeof localStorage !== 'undefined') {\n        try {\n            localStorage.setItem('feature_test', 'yes');\n            if (localStorage.getItem('feature_test') === 'yes') {\n                localStorage.removeItem('feature_test');\n                // localStorage is enabled\n                return true;\n            } else {\n                // localStorage is disabled\n                return false;\n            }\n        } catch (e) {\n            // localStorage is disabled\n            return false;\n        }\n    } else {\n        // localStorage is not available\n        return false;\n    }\n}\n\nfunction exists(key: string) {\n    if (featureAvailable()) {\n        return localStorage.getItem(key) !== null;\n    }\n}\n\nfunction unshift<T>(key: string, value: T) {\n    if (featureAvailable()) {\n        if (exists(key)) {\n            let values = JSON.parse(localStorage.getItem(key) as string);\n            values.unshift(value);\n            localStorage.setItem(key, JSON.stringify(values));\n        } else {\n            const values = [value];\n            localStorage.setItem(key, JSON.stringify(values));\n        }\n    }\n}\n\nfunction append<T>(key: string, value: T) {\n    if (featureAvailable()) {\n        if (exists(key)) {\n            let values = JSON.parse(localStorage.getItem(key) as string);\n            values.push(value);\n            localStorage.setItem(key, JSON.stringify(values));\n        } else {\n            const values = [value];\n            localStorage.setItem(key, JSON.stringify(values));\n        }\n    }\n}\n\nfunction set(key: string, value: string) {\n    if (featureAvailable()) {\n        localStorage.setItem(key, value);\n    }\n}\n\nfunction get(key: string) {\n    return featureAvailable() ? localStorage.getItem(key) : 'no localStorage';\n}\n\nfunction remove(key: string) {\n    if (featureAvailable() && exists(key)) {\n        localStorage.removeItem(key);\n    }\n}\n\nexport {exists, featureAvailable, get, set, append, remove, unshift};\n","import {append, get, remove, unshift} from \"../../lib/localStorge.utils\";\n\nexport default function useLocalList<T>(key: string) {\n    function push(value: T) {\n        append<T>(key, value);\n    }\n\n    function addAtBeginning<T>(value: T) {\n        unshift<T>(key, value);\n    }\n\n    function fetch<T>(): T[] {\n        return JSON.parse(get(key) as string) || [] as T[];\n    }\n\n    function clear() {\n        remove(key);\n    }\n\n    return {push, fetch, clear, addAtBeginning};\n}\n","import React, {SyntheticEvent} from \"react\";\n\nexport default function InputFile(props: any) {\n    const {onFileRead} = props.actions;\n\n    function onFile(e: SyntheticEvent<HTMLInputElement>) {\n        const file = e?.currentTarget?.files?.[0];\n        const reader = new FileReader();\n        reader.onload = function (e) {\n            const data = JSON.parse(e!.target!.result as string);\n            onFileRead(data);\n            console.log(data);\n        };\n        reader.readAsText(file!, 'utf-8');\n    }\n\n    return (\n        <>\n            <label htmlFor=\"upload\">Upload</label>\n            <input type=\"file\" id=\"upload\" name=\"upload\" accept=\"application/json\" onChange={onFile}\n                   style={{visibility: 'hidden'}}/>\n        </>\n    );\n}\n","import React, {SyntheticEvent, useState} from 'react';\nimport './App.css';\nimport AddText from \"./components/AddText\";\nimport ListTimeStamps from \"./components/ListTimeStamps\";\nimport createStamp, {LifeStamp, merge} from \"./lib/stamps.utils\";\nimport useLocalList from \"./components/hooks/localStorage.hook\";\nimport InputFile from \"./components/InputFile\";\n\nfunction App() {\n    const {addAtBeginning: addStamp, fetch: fetchStamps, clear: clearStamps} = useLocalList('LIFESTAMPS');\n    const [newText, setNewText] = useState('');\n    const [stamps, setStamps] = useState(fetchStamps<LifeStamp>());\n\n    function onInput(e: SyntheticEvent<HTMLInputElement>) {\n        setNewText(e.currentTarget.value);\n    }\n\n    function onSubmit(e: SyntheticEvent<HTMLButtonElement>) {\n        if (newText) {\n            const stamp = createStamp(newText, stamps.length + 1);\n            setStamps([stamp, ...stamps]);\n            addStamp(stamp);\n            setNewText('');\n        }\n    }\n\n    function onFileRead(data: LifeStamp[]) {\n        const mergedLifeStamps = merge(stamps, data);\n        clearStamps();\n        mergedLifeStamps.forEach((stamp: string) => addStamp(stamp));\n        setStamps(mergedLifeStamps);\n    }\n\n    return (\n        <div className=\"App\">\n            <header className=\"header\">\n                <h2 className=\"brand\">LifeStamps</h2>\n            </header>\n            <section className=\"content\">\n                <AddText value={newText} btnActions={{onSubmit}} inputActions={{onInput}}/>\n                <ListTimeStamps list={stamps}/>\n            </section>\n            <footer className=\"footer\">\n                <div className=\"controls\">\n\n                    {stamps.length > 0 &&\n                    <>\n                        <a href={`data:text/json;charset=utf-8,${encodeURIComponent(JSON.stringify(stamps, null, 4))}`}\n                           download={`lifestamps-${new Date().toLocaleDateString()}.json`}>download</a>\n                        |\n                    </>\n                    }\n                    <InputFile actions={{onFileRead}}/>\n\n                </div>\n                <h6>lifestamps by anubhav | v0.4.0-10</h6>\n            </footer>\n        </div>\n    );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}