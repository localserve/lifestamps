{"version":3,"sources":["components/AddText.tsx","components/ListTimeStamps.tsx","lib/stamps.utils.ts","lib/localStorge.utils.ts","components/hooks/localStorage.hook.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["AddText","props","btnActions","inputActions","value","className","id","name","placeholder","onInput","onClick","onSubmit","ListTimeStamps","list","length","map","v","JSON","parse","i","note","ts","formattedTimeStamp","Date","toJSON","split","day","time","replace","featureAvailable","localStorage","setItem","getItem","removeItem","e","exists","key","useLocalList","push","values","stringify","append","fetch","get","clear","remove","addAtBeginning","unshift","App","addStamp","fetchStamps","useState","newText","setNewText","stamps","setStamps","stamp","guid","currentTarget","href","encodeURIComponent","download","toLocaleDateString","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5d51f225.chunk.js","sourcesContent":["import React from \"react\";\n\nexport default function AddText(props: any) {\n    const {btnActions, inputActions, value} = props;\n    return (\n        <div className='add-text-container'>\n            <textarea value={value} id=\"add-text\" name=\"add-text\" placeholder=\"enter text here\"\n                   onInput={inputActions.onInput}/>\n            <button id=\"add-text-btn\" onClick={btnActions.onSubmit}>+</button>\n        </div>\n    );\n}\n","import React from \"react\";\nimport {Note} from \"../lib/stamps.utils\";\n\nexport default function ListTimeStamps(props: any) {\n    const {list} = props;\n    return (\n        <div className=\"stamps\">\n            {list && list.length > 0 && list.map((v: string) => JSON.parse(v)).map(({note, ts}: Note, i: number) => {\n                return <div className=\"stamp\" key={`list-item-${i}`}>\n                    <div className=\"ts\">\n                        {ts}\n                    </div>\n                    <div className=\"note\">\n                        {note}\n                    </div>\n                </div>;\n            })}\n        </div>\n    );\n}","import {v4 as guid} from 'uuid';\n\nexport type Note = {\n    note: string,\n    ts: string,\n    id: string\n}\n\nfunction formattedTimeStamp() {\n    const d = new Date().toJSON();\n    const [day, timeString] = d.split('T');\n    const [time, _] = timeString.split('.');\n    return `${day.replace(/\\-/g, '.')} ${time}`;\n}\n\nexport default function createStamp(note: string): Note {\n    return {note, ts: formattedTimeStamp(), id: guid()};\n}\n","function featureAvailable() {\n    if (typeof localStorage !== 'undefined') {\n        try {\n            localStorage.setItem('feature_test', 'yes');\n            if (localStorage.getItem('feature_test') === 'yes') {\n                localStorage.removeItem('feature_test');\n                // localStorage is enabled\n                return true;\n            } else {\n                // localStorage is disabled\n                return false;\n            }\n        } catch (e) {\n            // localStorage is disabled\n            return false;\n        }\n    } else {\n        // localStorage is not available\n        return false;\n    }\n}\n\nfunction exists(key: string) {\n    if (featureAvailable()) {\n        return localStorage.getItem(key) !== null;\n    }\n}\n\nfunction unshift<T>(key: string, value: T) {\n    if (featureAvailable()) {\n        if (exists(key)) {\n            let values = JSON.parse(localStorage.getItem(key) as string);\n            values.unshift(value);\n            localStorage.setItem(key, JSON.stringify(values));\n        } else {\n            const values = [value];\n            localStorage.setItem(key, JSON.stringify(values));\n        }\n    }\n}\n\nfunction append<T>(key: string, value: T) {\n    if (featureAvailable()) {\n        if (exists(key)) {\n            let values = JSON.parse(localStorage.getItem(key) as string);\n            values.push(value);\n            localStorage.setItem(key, JSON.stringify(values));\n        } else {\n            const values = [value];\n            localStorage.setItem(key, JSON.stringify(values));\n        }\n    }\n}\n\nfunction set(key: string, value: string) {\n    if (featureAvailable()) {\n        localStorage.setItem(key, value);\n    }\n}\n\nfunction get(key: string) {\n    return featureAvailable() ? localStorage.getItem(key) : 'no localStorage';\n}\n\nfunction remove(key: string) {\n    if (featureAvailable() && exists(key)) {\n        localStorage.removeItem(key);\n    }\n}\n\nexport {exists, featureAvailable, get, set, append, remove, unshift};\n","import {append, get, remove, unshift} from \"../../lib/localStorge.utils\";\n\nexport default function useLocalList(key: string) {\n    function push(value: string) {\n        if (value && value.length >= 3) {\n            append<string>(key, value);\n        }\n    }\n\n    function addAtBeginning(value: string) {\n        if (value && value.length > 0) {\n            unshift<string>(key, value);\n        }\n    }\n\n    function fetch(): string[] {\n        return JSON.parse(get(key) as string) || [] as string[];\n    }\n\n    function clear() {\n        remove(key);\n    }\n\n    return {push, fetch, clear, addAtBeginning};\n}\n","import React, {SyntheticEvent, useState} from 'react';\nimport './App.css';\nimport AddText from \"./components/AddText\";\nimport ListTimeStamps from \"./components/ListTimeStamps\";\nimport createStamp from \"./lib/stamps.utils\";\nimport useLocalList from \"./components/hooks/localStorage.hook\";\n\nfunction App() {\n    const {addAtBeginning: addStamp, fetch: fetchStamps} = useLocalList('LIFESTAMPS');\n    const [newText, setNewText] = useState('');\n    const [stamps, setStamps] = useState(fetchStamps());\n\n    function onInput(e: SyntheticEvent<HTMLInputElement>) {\n        setNewText(e.currentTarget.value);\n    }\n\n    function onSubmit(e: SyntheticEvent<HTMLButtonElement>) {\n        if (newText) {\n            const stamp = JSON.stringify(createStamp(newText));\n            setStamps([stamp, ...stamps]);\n            addStamp(stamp);\n            setNewText('');\n        }\n    }\n\n    return (\n        <div className=\"App\">\n            <header className=\"header\">\n                <h2 className=\"brand\">LifeStamps</h2>\n            </header>\n            <section className=\"content\">\n                <AddText value={newText} btnActions={{onSubmit}} inputActions={{onInput}}/>\n                <ListTimeStamps list={stamps}/>\n            </section>\n            <footer className=\"footer\">\n                {stamps.length > 0 &&\n                <a href={`data:text/json;charset=utf-8,${encodeURIComponent(JSON.stringify(stamps, null, 4))}`}\n                   download={`lifestamps-${new Date().toLocaleDateString()}.json`}>download</a>\n                }\n            </footer>\n        </div>\n    );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}