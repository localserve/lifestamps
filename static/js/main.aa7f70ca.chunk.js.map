{"version":3,"sources":["components/contexts/StampsContext.contexts.tsx","components/AddText.tsx","components/ListStamps.tsx","lib/stamps.utils.ts","lib/localStorge.utils.ts","components/hooks/localStorage.hook.ts","icons/file_upload_white_24dp.svg","components/InputFile.tsx","icons/file_download_white_24dp.svg","components/DownloadFile.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["StampsContext","createContext","AddText","Consumer","onAddStamp","onTextInput","textValue","className","value","id","name","placeholder","onInput","e","onClick","StampsContainer","stamps","ListStamps","useState","filterTag","setFilterTag","_stamps","items","length","sort","a","b","created_at","map","stamp","i","note","ts","_key","tags","filter","includes","getListItems","values","ListItem","key","tag","index","formattedTimeStamp","Date","toJSON","split","day","time","replace","createStamp","serial","dts","now","guid","updated_at","type","createTags","lowered","match","w","trim","toLocaleLowerCase","Array","from","Set","featureAvailable","localStorage","setItem","getItem","removeItem","exists","useLocalList","push","JSON","parse","stringify","append","fetch","data","get","console","error","message","clear","remove","addAtBeginning","_values","unshift","InputFile","props","onFileRead","actions","htmlFor","style","cursor","src","uploadIcon","alt","accept","onChange","file","currentTarget","files","reader","FileReader","onload","target","result","log","readAsText","display","DownloadFile","href","encodeURIComponent","download","toLocaleDateString","downloadFile","App","addStampToLocal","fetchStampsFromLocal","clearStampsFromLocal","setTextValue","newStamp","upgradeStampsVersion","setStamps","Provider","mergedLifeStamps","stampsA","stampsB","obj","reduce","Object","merge","forEach","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qNASMA,G,MAAgBC,wBAAc,K,OCNrB,SAASC,IACpB,OACI,cAACF,EAAcG,SAAf,UACK,YAA2C,IAAzCC,EAAwC,EAAxCA,WAAYC,EAA4B,EAA5BA,YAAaC,EAAe,EAAfA,UACxB,OACI,sBAAKC,UAAU,qBAAf,UACI,0BACIC,MAAOF,EACPG,GAAG,WACHC,KAAK,WACLC,YAAY,kBACZC,QAAS,SAACC,GAAD,OAAOR,EAAYQ,MAEhC,wBAAQJ,GAAG,eAAeK,QAASV,EAAnC,qB,mBCXjB,SAASW,IACZ,OAAO,cAACf,EAAcG,SAAf,UAEC,gBAAEa,EAAF,EAAEA,OAAF,OAAc,cAACC,EAAD,CAAuCD,OAAQA,GAA/B,2BAK3B,SAASC,EAAT,GAAwD,IAAnCD,EAAkC,EAAlCA,OAChC,EAAkCE,mBAAS,IAA3C,mBAAOC,EAAP,KAAkBC,EAAlB,KAiBA,OAAO,qCACFD,GAAa,sBAAKZ,UAAU,eAAeO,QAAS,WACjDM,EAAa,KADH,mBAEJD,KACV,qBAAKZ,UAAU,SAAf,SAnBJ,SAAsBc,GAClB,IAAMC,EAAQD,GAAWA,EAAQE,OAAS,EACtCF,EACKG,MAAK,SAACC,EAAGC,GAAJ,OAAUA,EAAEC,WAAaF,EAAEE,cAChCC,KAAI,SAACC,EAAkBC,GAAnB,MAAkC,CACnCC,KAAMF,EAAME,KACZC,GAAIH,EAAMG,GACVC,KAAK,aAAD,OAAeH,GACnBI,KAAML,EAAMK,KACZd,mBAEN,GACN,OAAOD,EAAYG,EAAMa,QAAO,SAAAL,GAAC,uBAAIA,EAAEI,YAAN,aAAI,EAAQE,SAASjB,MAAcG,EAS5De,CAAarB,GACRY,KAAI,SAACU,GAAD,OACD,wBAACC,EAAD,2BACQD,GADR,IAEIE,IAAG,UAAKF,EAAOL,KAAZ,qBANM,aAsBrC,SAASM,EAAT,GAAoE,IAAjDR,EAAgD,EAAhDA,KAAMC,EAA0C,EAA1CA,GAAIC,EAAsC,EAAtCA,KAAMC,EAAgC,EAAhCA,KAAMd,EAA0B,EAA1BA,aACrC,OAAO,sBAAKb,UAAU,QAAf,UACH,qBAAKA,UAAU,KAAf,SACKyB,IAEL,qBAAKzB,UAAU,OAAf,SACI,cAAC,IAAD,UAAgBwB,MAEnBG,IAAY,OAAJA,QAAI,IAAJA,OAAA,EAAAA,EAAMX,QAAS,GACxB,qBAAKhB,UAAU,OAAf,SACK2B,EACIN,KAAI,SAACa,EAAaC,GAAd,OACD,sBAAMnC,UAAU,MAA+BO,QAAS,kBAAMM,EAAaqB,IAA3E,SAAkFA,GAAlF,kBAAsCC,WAXnBT,G,mBC7CvC,SAASU,IACL,IACA,GADU,IAAIC,MAAOC,SACOC,MAAM,KAAlC,mBAAOC,EAAP,KACMC,EADN,KACwBF,MAAM,KAAK,GACnC,MAAM,GAAN,OAAUC,EAAIE,QAAQ,KAAM,KAA5B,YAAoCD,GAGzB,SAASE,EAAYnB,EAAcoB,GAC9C,IAAMC,EAAcR,KAAKS,MACzB,MAAO,CACHtB,OACAC,GAAIW,IACJlC,GAAI6C,cACJ3B,WAAYyB,EACZG,WAAYH,EACZD,SACAK,KAAM,YACNtB,KAAMuB,EAAW1B,IAIzB,SAAS0B,EAAW1B,GAChB,IAEM2B,GAFQ3B,EAAK4B,MAAM,wCAA0C,IAC9C/B,KAAI,SAACgC,GAAD,OAAeA,EAAEC,UAClBjC,KAAI,SAAAgC,GAAC,OAAIA,EAAEE,uBACnC,OAAOC,MAAMC,KAAK,IAAIC,IAAIP,ICtC9B,SAASQ,IACL,GAA4B,qBAAjBC,aAiBP,OAAO,EAhBP,IAEI,OADAA,aAAaC,QAAQ,eAAgB,OACQ,QAAzCD,aAAaE,QAAQ,kBACrBF,aAAaG,WAAW,iBAEjB,GAKb,MAAOzD,GAEL,OAAO,GAQnB,SAAS0D,EAAO/B,GACZ,GAAI0B,IACA,OAAqC,OAA9BC,aAAaE,QAAQ7B,GCtBrB,SAASgC,EAAgBhC,GAwBpC,MAAO,CAACiC,KAvBR,SAAcjE,IDyClB,SAAmBgC,EAAahC,GAC5B,GAAI0D,IACA,GAAIK,EAAO/B,GAAM,CACb,IAAIF,EAASoC,KAAKC,MAAMR,aAAaE,QAAQ7B,IAC7CF,EAAOmC,KAAKjE,GACZ2D,aAAaC,QAAQ5B,EAAKkC,KAAKE,UAAUtC,QACtC,CACH,IAAMA,EAAS,CAAC9B,GAChB2D,aAAaC,QAAQ5B,EAAKkC,KAAKE,UAAUtC,KChD7CuC,CAAUrC,EAAKhC,IAsBLsE,MAfd,WACI,IAAIC,EAAY,GAChB,IACIA,EAAOL,KAAKC,MDiDxB,SAAanC,GACT,OAAO0B,IAAqBC,aAAaE,QAAQ7B,GAAO,kBClD9BwC,CAAIxC,IAAkB,KAAO,GACjD,MAAO3B,GACLoE,QAAQC,MAAR,OAAcrE,QAAd,IAAcA,OAAd,EAAcA,EAAGsE,SAHrB,QAKI,OAAOJ,IAQMK,MAJrB,YD6CJ,SAAgB5C,GACR0B,KAAsBK,EAAO/B,IAC7B2B,aAAaG,WAAW9B,GC9CxB6C,CAAO7C,IAGiB8C,eAnB5B,SAA2B9E,IDqB/B,SAAoBgC,EAAahC,GAC7B,GAAI0D,IAAoB,CACpB,GAAIK,EAAO/B,GAAM,CACb,IAAM+C,EAAUpB,aAAaE,QAAQ7B,GACrC,GAAI+C,EAAS,CACT,IAAIjD,EAASoC,KAAKC,MAAMY,GAGxB,OAFAjD,EAAOkD,QAAQhF,QACf2D,aAAaC,QAAQ5B,EAAKkC,KAAKE,UAAUtC,KAIjD,IAAMA,EAAS,CAAC9B,GAChB2D,aAAaC,QAAQ5B,EAAKkC,KAAKE,UAAUtC,KChCzCkD,CAAWhD,EAAKhC,KCRT,UAA0B,mDCI1B,SAASiF,EAAUC,GAC9B,IAAOC,EAAcD,EAAME,QAApBD,WAaP,OACI,wBAAOE,QAAQ,SAASC,MAAO,CAACC,OAAQ,WAAYxF,UAAU,iBAA9D,UACI,qBAAKyF,IAAKC,EAAYC,IAAI,uCAC1B,uBACI1C,KAAK,OACL/C,GAAG,SACHC,KAAK,SACLyF,OAAO,mBACPC,SAnBZ,SAAgBvF,GAAsC,IAAD,IAC3CwF,EAAI,OAAGxF,QAAH,IAAGA,GAAH,UAAGA,EAAGyF,qBAAN,iBAAG,EAAkBC,aAArB,aAAG,EAA0B,GACjCC,EAAS,IAAIC,WACnBD,EAAOE,OAAS,SAAU7F,GACtB,IAAMkE,EAAOL,KAAKC,MAAM9D,EAAG8F,OAAQC,QACnCjB,EAAWZ,GACXE,QAAQ4B,IAAI9B,IAEhByB,EAAOM,WAAWT,EAAO,UAYjBP,MAAO,CAACiB,QAAS,aC3BlB,UAA0B,qDCI1B,SAASC,IACpB,OAAO,cAAChH,EAAcG,SAAf,UACF,gBAAEa,EAAF,EAAEA,OAAF,OAAc,mCACXA,EAAOO,OAAS,GAChB,mBACI0F,KAAI,uCAAkCC,mBAAmBxC,KAAKE,UAAU5D,EAAQ,KAAM,KACtFmG,SAAQ,sBAAgB,IAAIvE,MAAOwE,qBAA3B,SACR7G,UAAU,mBAHd,SAKI,qBAAKyF,IAAKqB,EAAcnB,IAAI,4CCwD7BoB,MA3Df,WACI,MAII9C,EAAa,cAHG+C,EADpB,EACIjC,eACOkC,EAFX,EAEI1C,MACO2C,EAHX,EAGIrC,MAGJ,EAAkClE,mBAAS,IAA3C,mBAAOZ,EAAP,KAAkBoH,EAAlB,KACA,EAA4BxG,mBPmCzB,SAA8BF,GAMjC,OAAOA,EAAOY,KALd,SAAoBC,GAChB,IAAM8F,EAAWzE,EAAYrB,EAAME,KAAMF,EAAMsB,QAC/C,OAAO,uCAAIwE,GAAa9F,GAAxB,IAA+BK,KAAMyF,EAASzF,UOtCb0F,CAAqBJ,MAA1D,mBAAOxG,EAAP,KAAe6G,EAAf,KAsBA,OACI,qBAAKtH,UAAU,MAAf,SACI,eAACP,EAAc8H,SAAf,CAAwBtH,MAAO,CAC3BQ,SACAZ,WApBZ,SAAoBS,GAChB,GAAIP,EAAW,CACX,IAAMuB,EAAQqB,EAAY5C,EAAWU,EAAOO,OAAS,GACrDsG,EAAU,CAAChG,GAAF,mBAAYb,KACrBuG,EAAgB1F,GAChB6F,EAAa,MAgBTrH,YAzBZ,SAAqBQ,GACjB6G,EAAa7G,EAAEyF,cAAc9F,QAyBrBF,aAJJ,UAMI,wBAAQC,UAAU,SAAlB,SACI,oBAAIA,UAAU,QAAd,SAAsB,mBAAG0G,KAAK,cAAR,4BAE1B,0BAAS1G,UAAU,UAAnB,UACI,cAACL,EAAD,IACA,cAACa,EAAD,OAEJ,yBAAQR,UAAU,SAAlB,UACI,sBAAKA,UAAU,WAAf,UACI,qFACA,cAACyG,EAAD,IACA,cAACvB,EAAD,CAAWG,QAAS,CAACD,WA1BzC,SAAoBZ,GAChB,IAAMgD,EPOP,SAAoCC,EAAcC,GACrD,IAAIC,EAAMF,EAAQG,QAAO,SAAC1G,EAAWI,GAEjC,OADC,2BAAOJ,GAAP,4BAAcI,EAAMpB,IAAOoB,MAE7B,IAKH,OAJAqG,EAAMD,EAAQE,QAAO,SAAC1G,EAAWI,GAE7B,OADC,2BAAOJ,GAAP,4BAAcI,EAAMpB,IAAOoB,MAE7BqG,GACIE,OAAO9F,OAAO4F,GOhBQG,CAAMrH,EAAQ+D,GACvC0C,IACAM,EAAiBO,SAAQ,SAACzG,GAAD,OAAmB0F,EAAgB1F,MAC5DgG,EAAUE,UAwBE,uCACA,6EChDLQ,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.aa7f70ca.chunk.js","sourcesContent":["import {createContext, FormEvent, SyntheticEvent} from \"react\";\nimport {LifeStamp} from \"../../lib/stamps.utils\";\n\ntype LifeStampContextT = {\n    stamps: LifeStamp[],\n    onTextInput: (e: FormEvent<HTMLTextAreaElement>) => void,\n    onAddStamp: (e: SyntheticEvent<HTMLButtonElement, Event>) => void,\n    textValue: string\n}\nconst StampsContext = createContext({} as LifeStampContextT);\n\nexport {StampsContext};\nexport type {LifeStampContextT};\n","import React from \"react\";\nimport {StampsContext} from \"./contexts/StampsContext.contexts\";\n\nexport default function AddText() {\n    return (\n        <StampsContext.Consumer>\n            {({onAddStamp, onTextInput, textValue}) => {\n                return (\n                    <div className=\"add-text-container\">\n                        <textarea\n                            value={textValue}\n                            id=\"add-text\"\n                            name=\"add-text\"\n                            placeholder=\"enter text here\"\n                            onInput={(e) => onTextInput(e)}\n                        />\n                        <button id=\"add-text-btn\" onClick={onAddStamp}>+</button>\n                    </div>\n                );\n            }}\n        </StampsContext.Consumer>\n    );\n}\n","import React, {Dispatch, SetStateAction, useState} from \"react\";\nimport {LifeStamp} from \"../lib/stamps.utils\";\nimport {StampsContext} from './contexts/StampsContext.contexts';\nimport ReactMarkdown from 'react-markdown';\n\nexport function StampsContainer() {\n    return <StampsContext.Consumer>\n        {\n            ({stamps}) => <ListStamps key=\"lifestamps-container\" stamps={stamps}/>\n        }\n    </StampsContext.Consumer>;\n}\n\nexport default function ListStamps({stamps}: { stamps: LifeStamp[] }) {\n    const [filterTag, setFilterTag] = useState('');\n\n    function getListItems(_stamps: LifeStamp[]): ListItemT[] {\n        const items = _stamps && _stamps.length > 0 ?\n            _stamps\n                .sort((a, b) => b.created_at - a.created_at)\n                .map((stamp: LifeStamp, i: number) => ({\n                    note: stamp.note,\n                    ts: stamp.ts,\n                    _key: `list-item-${i}`,\n                    tags: stamp.tags,\n                    setFilterTag\n                }))\n            : [];\n        return filterTag ? items.filter(i => i.tags?.includes(filterTag)) : items;\n    }\n\n    return <>\n        {filterTag && <div className=\"filter-close\" onClick={() => {\n            setFilterTag('');\n        }}>clear {filterTag}</div>}\n        <div className=\"stamps\" key={'stamps'}>\n            {\n                getListItems(stamps)\n                    .map((values: ListItemT) =>\n                        <ListItem\n                            {...values}\n                            key={`${values._key}-container`}\n                        />\n                    )\n            }\n        </div>\n    </>;\n}\n\ntype ListItemT = {\n    note: string;\n    ts: string;\n    _key: string;\n    tags?: string[];\n    setFilterTag: Dispatch<SetStateAction<string>>\n}\n\nfunction ListItem({note, ts, _key, tags, setFilterTag}: ListItemT) {\n    return <div className=\"stamp\" key={_key}>\n        <div className=\"ts\">\n            {ts}\n        </div>\n        <div className=\"note\">\n            <ReactMarkdown>{note}</ReactMarkdown>\n        </div>\n        {tags && tags?.length > 0 &&\n        <div className=\"tags\">\n            {tags\n                .map((tag: string, index: number) =>\n                    <span className=\"tag\" key={`key-tag-${index}`} onClick={() => setFilterTag(tag)}>{tag}</span>)\n            }\n        </div>\n        }\n    </div>;\n}\n","import {v4 as guid} from 'uuid';\n\nexport type LifeStamp = {\n    note: string,\n    ts: string,\n    id: string,\n    created_at: number;\n    updated_at: number;\n    serial: number;\n    type: string;\n    tags?: string[]\n}\n\nfunction formattedTimeStamp() {\n    const d = new Date().toJSON();\n    const [day, timeString] = d.split('T');\n    const time = timeString.split('.')[0];\n    return `${day.replace(/-/g, '.')} ${time}`;\n}\n\nexport default function createStamp(note: string, serial: number): LifeStamp {\n    const dts: number = Date.now();\n    return {\n        note,\n        ts: formattedTimeStamp(),\n        id: guid(),\n        created_at: dts,\n        updated_at: dts,\n        serial,\n        type: 'LifeStamp',\n        tags: createTags(note)\n    };\n}\n\nfunction createTags(note: string): string[] {\n    const tags = (note.match(/^#[A-Za-z0-9-_]+|\\W#[A-Za-z0-9-_]+/g) || []);\n    const trimmed = tags.map((w: string) => w.trim());\n    const lowered = trimmed.map(w => w.toLocaleLowerCase());\n    return Array.from(new Set(lowered));\n}\n\nexport function merge<T extends LifeStamp>(stampsA: T[], stampsB: T[]) {\n    let obj = stampsA.reduce((a: Object, stamp: T) => {\n        a = {...a, [`${stamp.id}`]: stamp};\n        return a;\n    }, {});\n    obj = stampsB.reduce((a: Object, stamp: T) => {\n        a = {...a, [`${stamp.id}`]: stamp};\n        return a;\n    }, obj);\n    return Object.values(obj);\n}\n\nexport function upgradeStampsVersion(stamps: LifeStamp[]): LifeStamp[] {\n    function cloneStamp(stamp: LifeStamp): LifeStamp {\n        const newStamp = createStamp(stamp.note, stamp.serial);\n        return {...newStamp, ...stamp, tags: newStamp.tags};\n    }\n\n    return stamps.map(cloneStamp);\n}\n\nexport function deleteStamp(serial: number, id: string, stamps: LifeStamp[]): LifeStamp[] {\n    const index = stamps.findIndex(stamp => stamp.id === id && stamp.serial === serial);\n    return [...stamps.slice(0, index), ...stamps.slice(index + 1)];\n}\n","function featureAvailable() {\n    if (typeof localStorage !== 'undefined') {\n        try {\n            localStorage.setItem('feature_test', 'yes');\n            if (localStorage.getItem('feature_test') === 'yes') {\n                localStorage.removeItem('feature_test');\n                // localStorage is enabled\n                return true;\n            } else {\n                // localStorage is disabled\n                return false;\n            }\n        } catch (e) {\n            // localStorage is disabled\n            return false;\n        }\n    } else {\n        // localStorage is not available\n        return false;\n    }\n}\n\nfunction exists(key: string) {\n    if (featureAvailable()) {\n        return localStorage.getItem(key) !== null;\n    }\n}\n\nfunction unshift<T>(key: string, value: T) {\n    if (featureAvailable()) {\n        if (exists(key)) {\n            const _values = localStorage.getItem(key);\n            if (_values) {\n                let values = JSON.parse(_values as string);\n                values.unshift(value);\n                localStorage.setItem(key, JSON.stringify(values));\n                return;\n            }\n        }\n        const values = [value];\n        localStorage.setItem(key, JSON.stringify(values));\n    }\n}\n\nfunction append<T>(key: string, value: T) {\n    if (featureAvailable()) {\n        if (exists(key)) {\n            let values = JSON.parse(localStorage.getItem(key) as string);\n            values.push(value);\n            localStorage.setItem(key, JSON.stringify(values));\n        } else {\n            const values = [value];\n            localStorage.setItem(key, JSON.stringify(values));\n        }\n    }\n}\n\nfunction set(key: string, value: string) {\n    if (featureAvailable()) {\n        localStorage.setItem(key, value);\n    }\n}\n\nfunction get(key: string) {\n    return featureAvailable() ? localStorage.getItem(key) : 'no localStorage';\n}\n\nfunction remove(key: string) {\n    if (featureAvailable() && exists(key)) {\n        localStorage.removeItem(key);\n    }\n}\n\nexport {exists, featureAvailable, get, set, append, remove, unshift};\n","import {append, get, remove, unshift} from \"../../lib/localStorge.utils\";\n\nexport default function useLocalList<T>(key: string) {\n    function push(value: T) {\n        append<T>(key, value);\n    }\n\n    function addAtBeginning<T>(value: T) {\n        unshift<T>(key, value);\n    }\n\n    function fetch<T>(): T[] {\n        let data: T[] = [];\n        try {\n            data = JSON.parse(get(key) as string || '') || [] as T[];\n        } catch (e: any) {\n            console.error(e?.message);\n        } finally {\n            return data;\n        }\n    }\n\n    function clear() {\n        remove(key);\n    }\n\n    return {push, fetch, clear, addAtBeginning};\n}\n","export default __webpack_public_path__ + \"static/media/file_upload_white_24dp.efa74fb3.svg\";","import React, {SyntheticEvent} from \"react\";\n\nimport uploadIcon from '../icons/file_upload_white_24dp.svg';\n\nexport default function InputFile(props: any) {\n    const {onFileRead} = props.actions;\n\n    function onFile(e: SyntheticEvent<HTMLInputElement>) {\n        const file = e?.currentTarget?.files?.[0];\n        const reader = new FileReader();\n        reader.onload = function (e) {\n            const data = JSON.parse(e!.target!.result as string);\n            onFileRead(data);\n            console.log(data);\n        };\n        reader.readAsText(file!, 'utf-8');\n    }\n\n    return (\n        <label htmlFor=\"upload\" style={{cursor: 'pointer'}} className=\"upload-control\">\n            <img src={uploadIcon} alt=\"upload previously downloaded json.\"/>\n            <input\n                type=\"file\"\n                id=\"upload\"\n                name=\"upload\"\n                accept=\"application/json\"\n                onChange={onFile}\n                style={{display: 'none'}}\n            />\n        </label>\n\n    );\n}\n","export default __webpack_public_path__ + \"static/media/file_download_white_24dp.e46f4fb0.svg\";","import React from 'react';\nimport downloadFile from \"../icons/file_download_white_24dp.svg\";\nimport {StampsContext} from \"./contexts/StampsContext.contexts\";\n\nexport default function DownloadFile() {\n    return <StampsContext.Consumer>\n        {({stamps}) => <>{\n            stamps.length > 0 &&\n            <a\n                href={`data:text/json;charset=utf-8,${encodeURIComponent(JSON.stringify(stamps, null, 4))}`}\n                download={`lifestamps-${new Date().toLocaleDateString()}.json`}\n                className=\"download-control\"\n            >\n                <img src={downloadFile} alt=\"download your lifestamps as json\"/>\n            </a>\n        }\n        </>\n        }\n    </StampsContext.Consumer>;\n}","import React, {FormEvent, SyntheticEvent, useState} from 'react';\nimport './App.css';\nimport AddText from \"./components/AddText\";\nimport {StampsContainer} from \"./components/ListStamps\";\nimport createStamp, {LifeStamp, merge, upgradeStampsVersion} from \"./lib/stamps.utils\";\nimport useLocalList from \"./components/hooks/localStorage.hook\";\nimport InputFile from \"./components/InputFile\";\nimport DownloadFile from \"./components/DownloadFile\";\nimport {StampsContext} from './components/contexts/StampsContext.contexts';\n\nfunction App() {\n    const {\n        addAtBeginning: addStampToLocal,\n        fetch: fetchStampsFromLocal,\n        clear: clearStampsFromLocal\n    } = useLocalList('LIFESTAMPS');\n\n    const [textValue, setTextValue] = useState('');\n    const [stamps, setStamps] = useState(upgradeStampsVersion(fetchStampsFromLocal<LifeStamp>()));\n\n    function onTextInput(e: FormEvent<HTMLTextAreaElement>) {\n        setTextValue(e.currentTarget.value);\n    }\n\n    function onAddStamp(e: SyntheticEvent<HTMLButtonElement>) {\n        if (textValue) {\n            const stamp = createStamp(textValue, stamps.length + 1);\n            setStamps([stamp, ...stamps]);\n            addStampToLocal(stamp);\n            setTextValue('');\n        }\n    }\n\n    function onFileRead(data: LifeStamp[]) {\n        const mergedLifeStamps = merge(stamps, data);\n        clearStampsFromLocal();\n        mergedLifeStamps.forEach((stamp: string) => addStampToLocal(stamp));\n        setStamps(mergedLifeStamps);\n    }\n\n    return (\n        <div className=\"App\">\n            <StampsContext.Provider value={{\n                stamps,\n                onAddStamp,\n                onTextInput,\n                textValue\n            }}>\n                <header className=\"header\">\n                    <h2 className=\"brand\"><a href=\"/lifestamps\">LifeStamps</a></h2>\n                </header>\n                <section className=\"content\">\n                    <AddText/>\n                    <StampsContainer/>\n                </section>\n                <footer className=\"footer\">\n                    <div className=\"controls\">\n                        <>JSON: (you can download and upload your data)</>\n                        <DownloadFile/>\n                        <InputFile actions={{onFileRead}}/>\n                    </div>\n                    <div>&nbsp;</div>\n                    <h6>lifestamps by anubhav | 0.30.0-143</h6>\n                </footer>\n            </StampsContext.Provider>\n        </div>\n    );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}